{"version":3,"file":"secp256k1-e_VVMlxZ.js","sources":["../../node_modules/@noble/hashes/esm/hmac.js","../../node_modules/viem/node_modules/@noble/curves/esm/utils.js","../../node_modules/viem/node_modules/@noble/curves/esm/abstract/modular.js","../../node_modules/viem/node_modules/@noble/curves/esm/abstract/curve.js","../../node_modules/viem/node_modules/@noble/curves/esm/abstract/weierstrass.js","../../node_modules/viem/node_modules/@noble/curves/esm/_shortw_utils.js","../../node_modules/viem/node_modules/@noble/curves/esm/secp256k1.js"],"sourcesContent":["/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes } from \"./utils.js\";\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        clean(pad);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { abytes as abytes_, bytesToHex as bytesToHex_, concatBytes as concatBytes_, hexToBytes as hexToBytes_, isBytes as isBytes_, } from '@noble/hashes/utils.js';\nexport { abytes, anumber, bytesToHex, bytesToUtf8, concatBytes, hexToBytes, isBytes, randomBytes, utf8ToBytes, } from '@noble/hashes/utils.js';\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nexport function abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(title + ' boolean expected, got ' + value);\n}\n// Used in weierstrass, der\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? '0' + hex : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex_(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes_(bytes);\n    return hexToNumber(bytesToHex_(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes_(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes_(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes_(hex);\n        }\n        catch (e) {\n            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n        }\n    }\n    else if (isBytes_(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(title + ' must be hex string or Uint8Array');\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\n// export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\n// export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_1n << BigInt(n)) - _1n;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    const u8n = (len) => new Uint8Array(len); // creates Uint8Array\n    const u8of = (byte) => Uint8Array.of(byte); // another shortcut\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n(0)) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes_(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes_(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error('invalid validator function');\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\nexport function isHash(val) {\n    return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\n}\nexport function _validateObject(object, fields, optFields = {}) {\n    if (!object || typeof object !== 'object')\n        throw new Error('expected valid options object');\n    function checkField(fieldName, expectedType, isOpt) {\n        const val = object[fieldName];\n        if (isOpt && val === undefined)\n            return;\n        const current = typeof val;\n        if (current !== expectedType || val === null)\n            throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\n    }\n    Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\n    Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\n}\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n//# sourceMappingURL=utils.js.map","/**\n * Utils for modular division and fields.\n * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { _validateObject, anumber, bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, } from \"../utils.js\";\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5);\nconst _8n = /* @__PURE__ */ BigInt(8);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num, power, modulo) {\n    return FpPow(Field(modulo), num, power);\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number, modulo) {\n    if (number === _0n)\n        throw new Error('invert: expected non-zero number');\n    if (modulo <= _0n)\n        throw new Error('invert: expected positive modulus, got ' + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4(Fp, n) {\n    const p1div4 = (Fp.ORDER + _1n) / _4n;\n    const root = Fp.pow(n, p1div4);\n    // Throw if root^2 != n\n    if (!Fp.eql(Fp.sqr(root), n))\n        throw new Error('Cannot find square root');\n    return root;\n}\nfunction sqrt5mod8(Fp, n) {\n    const p5div8 = (Fp.ORDER - _5n) / _8n;\n    const n2 = Fp.mul(n, _2n);\n    const v = Fp.pow(n2, p5div8);\n    const nv = Fp.mul(n, v);\n    const i = Fp.mul(Fp.mul(nv, _2n), v);\n    const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n    if (!Fp.eql(Fp.sqr(root), n))\n        throw new Error('Cannot find square root');\n    return root;\n}\n// TODO: Commented-out for now. Provide test vectors.\n// Tonelli is too slow for extension fields Fp2.\n// That means we can't use sqrt (c1, c2...) even for initialization constants.\n// if (P % _16n === _9n) return sqrt9mod16;\n// // prettier-ignore\n// function sqrt9mod16<T>(Fp: IField<T>, n: T, p7div16?: bigint) {\n//   if (p7div16 === undefined) p7div16 = (Fp.ORDER + BigInt(7)) / _16n;\n//   const c1 = Fp.sqrt(Fp.neg(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n//   const c2 = Fp.sqrt(c1);             //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n//   const c3 = Fp.sqrt(Fp.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n//   const c4 = p7div16;                 //  4. c4 = (q + 7) / 16        # Integer arithmetic\n//   let tv1 = Fp.pow(n, c4);            //  1. tv1 = x^c4\n//   let tv2 = Fp.mul(c1, tv1);          //  2. tv2 = c1 * tv1\n//   const tv3 = Fp.mul(c2, tv1);        //  3. tv3 = c2 * tv1\n//   let tv4 = Fp.mul(c3, tv1);          //  4. tv4 = c3 * tv1\n//   const e1 = Fp.eql(Fp.sqr(tv2), n);  //  5.  e1 = (tv2^2) == x\n//   const e2 = Fp.eql(Fp.sqr(tv3), n);  //  6.  e2 = (tv3^2) == x\n//   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n//   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n//   const e3 = Fp.eql(Fp.sqr(tv2), n);  //  9.  e3 = (tv2^2) == x\n//   return Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3) # Select the sqrt from tv1 and tv2\n// }\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Initialization (precomputation).\n    // Caching initialization could boost perf by 7%.\n    if (P < BigInt(3))\n        throw new Error('sqrt is not defined for small field');\n    // Factor P - 1 = Q * 2^S, where Q is odd\n    let Q = P - _1n;\n    let S = 0;\n    while (Q % _2n === _0n) {\n        Q /= _2n;\n        S++;\n    }\n    // Find the first quadratic non-residue Z >= 2\n    let Z = _2n;\n    const _Fp = Field(P);\n    while (FpLegendre(_Fp, Z) === 1) {\n        // Basic primality test for P. After x iterations, chance of\n        // not finding quadratic non-residue is 2^x, so 2^1000.\n        if (Z++ > 1000)\n            throw new Error('Cannot find square root: probably non-prime P');\n    }\n    // Fast-path; usually done before Z, but we do \"primality test\".\n    if (S === 1)\n        return sqrt3mod4;\n    // Slow-path\n    // TODO: test on Fp2 and others\n    let cc = _Fp.pow(Z, Q); // c = z^Q\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        if (Fp.is0(n))\n            return n;\n        // Check if n is a quadratic residue using Legendre symbol\n        if (FpLegendre(Fp, n) !== 1)\n            throw new Error('Cannot find square root');\n        // Initialize variables for the main loop\n        let M = S;\n        let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n        let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n        let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n        // Main loop\n        // while t != 1\n        while (!Fp.eql(t, Fp.ONE)) {\n            if (Fp.is0(t))\n                return Fp.ZERO; // if t=0 return R=0\n            let i = 1;\n            // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n            let t_tmp = Fp.sqr(t); // t^(2^1)\n            while (!Fp.eql(t_tmp, Fp.ONE)) {\n                i++;\n                t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n                if (i === M)\n                    throw new Error('Cannot find square root');\n            }\n            // Calculate the exponent for b: 2^(M - i - 1)\n            const exponent = _1n << BigInt(M - i - 1); // bigint is important\n            const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n            // Update variables\n            M = i;\n            c = Fp.sqr(b); // c = b^2\n            t = Fp.mul(t, c); // t = (t * b^2)\n            R = Fp.mul(R, b); // R = R*b\n        }\n        return R;\n    };\n}\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P) {\n    // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n    if (P % _4n === _3n)\n        return sqrt3mod4;\n    // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n    if (P % _8n === _5n)\n        return sqrt5mod8;\n    // P ≡ 9 (mod 16) not implemented, see above\n    // Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'number',\n        BITS: 'number',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    _validateObject(field, opts);\n    // const max = 16384;\n    // if (field.BYTES < 1 || field.BYTES > max) throw new Error('invalid field');\n    // if (field.BITS < 1 || field.BITS > 8 * max) throw new Error('invalid field');\n    return field;\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(Fp, num, power) {\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (power === _0n)\n        return Fp.ONE;\n    if (power === _1n)\n        return num;\n    let p = Fp.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = Fp.mul(p, d);\n        d = Fp.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch(Fp, nums, passZero = false) {\n    const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n    // Walk from first to last, multiply them by each other MOD p\n    const multipliedAcc = nums.reduce((acc, num, i) => {\n        if (Fp.is0(num))\n            return acc;\n        inverted[i] = acc;\n        return Fp.mul(acc, num);\n    }, Fp.ONE);\n    // Invert last element\n    const invertedAcc = Fp.inv(multipliedAcc);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (Fp.is0(num))\n            return acc;\n        inverted[i] = Fp.mul(acc, inverted[i]);\n        return Fp.mul(acc, num);\n    }, invertedAcc);\n    return inverted;\n}\n// TODO: remove\nexport function FpDiv(Fp, lhs, rhs) {\n    return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(Fp, n) {\n    // We can use 3rd argument as optional cache of this value\n    // but seems unneeded for now. The operation is very fast.\n    const p1mod2 = (Fp.ORDER - _1n) / _2n;\n    const powered = Fp.pow(n, p1mod2);\n    const yes = Fp.eql(powered, Fp.ONE);\n    const zero = Fp.eql(powered, Fp.ZERO);\n    const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n    if (!yes && !zero && !no)\n        throw new Error('invalid Legendre symbol result');\n    return yes ? 1 : zero ? 0 : -1;\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(Fp, n) {\n    const l = FpLegendre(Fp, n);\n    return l === 1;\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    if (nBitLength !== undefined)\n        anumber(nBitLength);\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Creates a finite field. Major performance optimizations:\n * * 1. Denormalized operations like mulN instead of mul.\n * * 2. Identical object shape: never add or remove keys.\n * * 3. `Object.freeze`.\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n *\n * Note about field properties:\n * * CHARACTERISTIC p = prime number, number of elements in main subgroup.\n * * ORDER q = similar to cofactor in curves, may be composite `q = p^m`.\n *\n * @param ORDER field order, probably prime, or could be composite\n * @param bitLen how many bits the field consumes\n * @param isLE (default: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLenOrOpts, isLE = false, opts = {}) {\n    if (ORDER <= _0n)\n        throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n    let _nbitLength = undefined;\n    let _sqrt = undefined;\n    if (typeof bitLenOrOpts === 'object' && bitLenOrOpts != null) {\n        if (opts.sqrt || isLE)\n            throw new Error('cannot specify opts in two arguments');\n        const _opts = bitLenOrOpts;\n        if (_opts.BITS)\n            _nbitLength = _opts.BITS;\n        if (_opts.sqrt)\n            _sqrt = _opts.sqrt;\n        if (typeof _opts.isLE === 'boolean')\n            isLE = _opts.isLE;\n    }\n    else {\n        if (typeof bitLenOrOpts === 'number')\n            _nbitLength = bitLenOrOpts;\n        if (opts.sqrt)\n            _sqrt = opts.sqrt;\n    }\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, _nbitLength);\n    if (BYTES > 2048)\n        throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n        ORDER,\n        isLE,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error('invalid field element: expected bigint, got ' + typeof num);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        // is valid and invertible\n        isValidNot0: (num) => !f.is0(num) && f.isValid(num),\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: _sqrt ||\n            ((n) => {\n                if (!sqrtP)\n                    sqrtP = FpSqrt(ORDER);\n                return sqrtP(f, n);\n            }),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n        // TODO: we don't need it here, move out to separate fn\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // We can't move this out because Fp6, Fp12 implement it\n        // and it's unclear what to return in there.\n        cmov: (a, b, c) => (c ? b : a),\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n    const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitLen, bitMask, validateObject } from \"../utils.js\";\nimport { Field, FpInvertBatch, nLength, validateField } from \"./modular.js\";\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nexport function negateCt(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\n/**\n * Takes a bunch of Projective Points but executes only one\n * inversion on all of them. Inversion is very slow operation,\n * so this improves performance massively.\n * Optimization: converts a list of projective points to a list of identical points with Z=1.\n */\nexport function normalizeZ(c, property, points) {\n    const getz = property === 'pz' ? (p) => p.pz : (p) => p.ez;\n    const toInv = FpInvertBatch(c.Fp, points.map(getz));\n    // @ts-ignore\n    const affined = points.map((p, i) => p.toAffine(toInv[i]));\n    return affined.map(c.fromAffine);\n}\nfunction validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n        throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\nfunction calcWOpts(W, scalarBits) {\n    validateW(W, scalarBits);\n    const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n    const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n    const maxNumber = 2 ** W; // W=8 256\n    const mask = bitMask(W); // W=8 255 == mask 0b11111111\n    const shiftBy = BigInt(W); // W=8 8\n    return { windows, windowSize, mask, maxNumber, shiftBy };\n}\nfunction calcOffsets(n, window, wOpts) {\n    const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n    let wbits = Number(n & mask); // extract W bits.\n    let nextN = n >> shiftBy; // shift number by W bits.\n    // What actually happens here:\n    // const highestBit = Number(mask ^ (mask >> 1n));\n    // let wbits2 = wbits - 1; // skip zero\n    // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n    // split if bits > max: +224 => 256-32\n    if (wbits > windowSize) {\n        // we skip zero, which means instead of `>= size-1`, we do `> size`\n        wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n        nextN += _1n; // +256 (carry)\n    }\n    const offsetStart = window * windowSize;\n    const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n    const isZero = wbits === 0; // is current window slice a 0?\n    const isNeg = wbits < 0; // is current window slice negative?\n    const isNegF = window % 2 !== 0; // fake random statement for noise\n    const offsetF = offsetStart; // fake offset for noise\n    return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\nfunction validateMSMPoints(points, c) {\n    if (!Array.isArray(points))\n        throw new Error('array expected');\n    points.forEach((p, i) => {\n        if (!(p instanceof c))\n            throw new Error('invalid point at index ' + i);\n    });\n}\nfunction validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars))\n        throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n        if (!field.isValid(s))\n            throw new Error('invalid scalar at index ' + i);\n    });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap();\nfunction getW(P) {\n    return pointWindowSizes.get(P) || 1;\n}\nfunction assert0(n) {\n    if (n !== _0n)\n        throw new Error('invalid wNAF');\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF(c, bits) {\n    return {\n        constTimeNegate: negateCt,\n        hasPrecomputes(elm) {\n            return getW(elm) !== 1;\n        },\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n, p = c.ZERO) {\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @param elm Point instance\n         * @param W window size\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // i=1, bc we skip 0\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // Smaller version:\n            // https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n            // TODO: check the scalar is less than group order?\n            // wNAF behavior is undefined otherwise. But have to carefully remove\n            // other checks before wNAF. ORDER == bits here.\n            // Accumulators\n            let p = c.ZERO;\n            let f = c.BASE;\n            // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n            // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n            // there is negate now: it is possible that negated element from low value\n            // would be the same as high element, which will create carry into next window.\n            // It's not obvious how this can fail, but still worth investigating later.\n            const wo = calcWOpts(W, bits);\n            for (let window = 0; window < wo.windows; window++) {\n                // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n                const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n                n = nextN;\n                if (isZero) {\n                    // bits are 0: add garbage to fake point\n                    // Important part for const-time getPublicKey: add random \"noise\" point to f.\n                    f = f.add(negateCt(isNegF, precomputes[offsetF]));\n                }\n                else {\n                    // bits are 1: add to result point\n                    p = p.add(negateCt(isNeg, precomputes[offset]));\n                }\n            }\n            assert0(n);\n            // Return both real and fake points: JIT won't eliminate f.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        /**\n         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @param acc accumulator point to add result of multiplication\n         * @returns point\n         */\n        wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {\n            const wo = calcWOpts(W, bits);\n            for (let window = 0; window < wo.windows; window++) {\n                if (n === _0n)\n                    break; // Early-exit, skip 0 value\n                const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n                n = nextN;\n                if (isZero) {\n                    // Window bits are 0: skip processing.\n                    // Move to next window.\n                    continue;\n                }\n                else {\n                    const item = precomputes[offset];\n                    acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n                }\n            }\n            assert0(n);\n            return acc;\n        },\n        getPrecomputes(W, P, transform) {\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    // Doing transform outside of if brings 15% perf hit\n                    if (typeof transform === 'function')\n                        comp = transform(comp);\n                    pointPrecomputes.set(P, comp);\n                }\n            }\n            return comp;\n        },\n        wNAFCached(P, n, transform) {\n            const W = getW(P);\n            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n        },\n        wNAFCachedUnsafe(P, n, transform, prev) {\n            const W = getW(P);\n            if (W === 1)\n                return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize(P, W) {\n            validateW(W, bits);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        },\n    };\n}\n/**\n * Endomorphism-specific multiplication for Koblitz curves.\n * Cost: 128 dbl, 0-256 adds.\n */\nexport function mulEndoUnsafe(c, point, k1, k2) {\n    let acc = point;\n    let p1 = c.ZERO;\n    let p2 = c.ZERO;\n    while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n)\n            p1 = p1.add(acc);\n        if (k2 & _1n)\n            p2 = p2.add(acc);\n        acc = acc.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n    }\n    return { p1, p2 };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    const plength = points.length;\n    const slength = scalars.length;\n    if (plength !== slength)\n        throw new Error('arrays of points and scalars must have equal length');\n    // if (plength === 0) throw new Error('array must be of length >= 2');\n    const zero = c.ZERO;\n    const wbits = bitLen(BigInt(plength));\n    let windowSize = 1; // bits\n    if (wbits > 12)\n        windowSize = wbits - 3;\n    else if (wbits > 4)\n        windowSize = wbits - 2;\n    else if (wbits > 0)\n        windowSize = 2;\n    const MASK = bitMask(windowSize);\n    const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n        buckets.fill(zero);\n        for (let j = 0; j < slength; j++) {\n            const scalar = scalars[j];\n            const wbits = Number((scalar >> BigInt(i)) & MASK);\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = zero; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0)\n            for (let j = 0; j < windowSize; j++)\n                sum = sum.double();\n    }\n    return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = bitMask(windowSize);\n    const tables = points.map((p) => {\n        const res = [];\n        for (let i = 0, acc = p; i < tableSize; i++) {\n            res.push(acc);\n            acc = acc.add(p);\n        }\n        return res;\n    });\n    return (scalars) => {\n        validateMSMScalars(scalars, fieldN);\n        if (scalars.length > points.length)\n            throw new Error('array of scalars must be smaller than array of points');\n        let res = zero;\n        for (let i = 0; i < chunks; i++) {\n            // No need to double if accumulator is still zero.\n            if (res !== zero)\n                for (let j = 0; j < windowSize; j++)\n                    res = res.double();\n            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n            for (let j = 0; j < scalars.length; j++) {\n                const n = scalars[j];\n                const curr = Number((n >> shiftBy) & MASK);\n                if (!curr)\n                    continue; // skip zero scalars chunks\n                res = res.add(tables[j][curr - 1]);\n            }\n        }\n        return res;\n    };\n}\n// TODO: remove\n/** @deprecated */\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\nfunction createField(order, field) {\n    if (field) {\n        if (field.ORDER !== order)\n            throw new Error('Field.ORDER must match order: Fp == p, Fn == n');\n        validateField(field);\n        return field;\n    }\n    else {\n        return Field(order);\n    }\n}\n/** Validates CURVE opts and creates fields */\nexport function _createCurveFields(type, CURVE, curveOpts = {}) {\n    if (!CURVE || typeof CURVE !== 'object')\n        throw new Error(`expected valid ${type} CURVE object`);\n    for (const p of ['p', 'n', 'h']) {\n        const val = CURVE[p];\n        if (!(typeof val === 'bigint' && val > _0n))\n            throw new Error(`CURVE.${p} must be positive bigint`);\n    }\n    const Fp = createField(CURVE.p, curveOpts.Fp);\n    const Fn = createField(CURVE.n, curveOpts.Fn);\n    const _b = type === 'weierstrass' ? 'b' : 'd';\n    const params = ['Gx', 'Gy', 'a', _b];\n    for (const p of params) {\n        // @ts-ignore\n        if (!Fp.isValid(CURVE[p]))\n            throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\n    }\n    return { Fp, Fn };\n}\n//# sourceMappingURL=curve.js.map","/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac.js';\nimport { _validateObject, abool, abytes, aInRange, bitMask, bytesToHex, bytesToNumberBE, concatBytes, createHmacDrbg, ensureBytes, hexToBytes, inRange, isBytes, memoized, numberToHexUnpadded, randomBytes, } from \"../utils.js\";\nimport { _createCurveFields, mulEndoUnsafe, negateCt, normalizeZ, pippenger, wNAF, } from \"./curve.js\";\nimport { Field, FpInvertBatch, getMinHashLength, mapHashToField, validateField, } from \"./modular.js\";\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined)\n        abool('lowS', opts.lowS);\n    if (opts.prehash !== undefined)\n        abool('prehash', opts.prehash);\n}\nexport class DERErr extends Error {\n    constructor(m = '') {\n        super(m);\n    }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data) => {\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length & 1)\n                throw new E('tlv.encode: unpadded data');\n            const dataLen = data.length / 2;\n            const len = numberToHexUnpadded(dataLen);\n            if ((len.length / 2) & 128)\n                throw new E('tlv.encode: long form length too big');\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 128) : '';\n            const t = numberToHexUnpadded(tag);\n            return t + lenLen + len + data;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode(tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length < 2 || data[pos++] !== tag)\n                throw new E('tlv.decode: wrong tlv');\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong)\n                length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen)\n                    throw new E('tlv.decode(long): indefinite length not supported');\n                if (lenLen > 4)\n                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen)\n                    throw new E('tlv.decode: length bytes not complete');\n                if (lengthBytes[0] === 0)\n                    throw new E('tlv.decode(long): zero leftmost byte');\n                for (const b of lengthBytes)\n                    length = (length << 8) | b;\n                pos += lenLen;\n                if (length < 128)\n                    throw new E('tlv.decode(long): not minimal encoding');\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length)\n                throw new E('tlv.decode: wrong value length');\n            return { v, l: data.subarray(pos + length) };\n        },\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode(num) {\n            const { Err: E } = DER;\n            if (num < _0n)\n                throw new E('integer: negative integers are not allowed');\n            let hex = numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 0b1000)\n                hex = '00' + hex;\n            if (hex.length & 1)\n                throw new E('unexpected DER parsing assertion: unpadded hex');\n            return hex;\n        },\n        decode(data) {\n            const { Err: E } = DER;\n            if (data[0] & 128)\n                throw new E('invalid signature integer: negative');\n            if (data[0] === 0x00 && !(data[1] & 128))\n                throw new E('invalid signature integer: unnecessary leading zero');\n            return bytesToNumberBE(data);\n        },\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = ensureBytes('signature', hex);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        return { r: int.decode(rBytes), s: int.decode(sBytes) };\n    },\n    hexFromSig(sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const rs = tlv.encode(0x02, int.encode(sig.r));\n        const ss = tlv.encode(0x02, int.encode(sig.s));\n        const seq = rs + ss;\n        return tlv.encode(0x30, seq);\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n// TODO: remove\nexport function _legacyHelperEquat(Fp, a, b) {\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x² * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n    }\n    return weierstrassEquation;\n}\nexport function _legacyHelperNormPriv(Fn, allowedPrivateKeyLengths, wrapPrivateKey) {\n    const { BYTES: expected } = Fn;\n    // Validates if priv key is valid and converts it to bigint.\n    function normPrivateKeyToScalar(key) {\n        let num;\n        if (typeof key === 'bigint') {\n            num = key;\n        }\n        else {\n            let bytes = ensureBytes('private key', key);\n            if (allowedPrivateKeyLengths) {\n                if (!allowedPrivateKeyLengths.includes(bytes.length * 2))\n                    throw new Error('invalid private key');\n                const padded = new Uint8Array(expected);\n                padded.set(bytes, padded.length - bytes.length);\n                bytes = padded;\n            }\n            try {\n                num = Fn.fromBytes(bytes);\n            }\n            catch (error) {\n                throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);\n            }\n        }\n        if (wrapPrivateKey)\n            num = Fn.create(num); // disabled by default, enabled for BLS\n        if (!Fn.isValidNot0(num))\n            throw new Error('invalid private key: out of range [1..N-1]');\n        return num;\n    }\n    return normPrivateKeyToScalar;\n}\nexport function weierstrassN(CURVE, curveOpts = {}) {\n    const { Fp, Fn } = _createCurveFields('weierstrass', CURVE, curveOpts);\n    const { h: cofactor, n: CURVE_ORDER } = CURVE;\n    _validateObject(curveOpts, {}, {\n        allowInfinityPoint: 'boolean',\n        clearCofactor: 'function',\n        isTorsionFree: 'function',\n        fromBytes: 'function',\n        toBytes: 'function',\n        endo: 'object',\n        wrapPrivateKey: 'boolean',\n    });\n    const { endo } = curveOpts;\n    if (endo) {\n        // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\n        if (!Fp.is0(CURVE.a) ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('invalid endo: expected \"beta\": bigint and \"splitScalar\": function');\n        }\n    }\n    function assertCompressionIsSupported() {\n        if (!Fp.isOdd)\n            throw new Error('compression is not supported: Field does not have .isOdd()');\n    }\n    // Implements IEEE P1363 point encoding\n    function pointToBytes(_c, point, isCompressed) {\n        const { x, y } = point.toAffine();\n        const bx = Fp.toBytes(x);\n        abool('isCompressed', isCompressed);\n        if (isCompressed) {\n            assertCompressionIsSupported();\n            const hasEvenY = !Fp.isOdd(y);\n            return concatBytes(pprefix(hasEvenY), bx);\n        }\n        else {\n            return concatBytes(Uint8Array.of(0x04), bx, Fp.toBytes(y));\n        }\n    }\n    function pointFromBytes(bytes) {\n        abytes(bytes);\n        const L = Fp.BYTES;\n        const LC = L + 1; // length compressed, e.g. 33 for 32-byte field\n        const LU = 2 * L + 1; // length uncompressed, e.g. 65 for 32-byte field\n        const length = bytes.length;\n        const head = bytes[0];\n        const tail = bytes.subarray(1);\n        // No actual validation is done here: use .assertValidity()\n        if (length === LC && (head === 0x02 || head === 0x03)) {\n            const x = Fp.fromBytes(tail);\n            if (!Fp.isValid(x))\n                throw new Error('bad point: is not on curve, wrong x');\n            const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n            let y;\n            try {\n                y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n            }\n            catch (sqrtError) {\n                const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                throw new Error('bad point: is not on curve, sqrt error' + err);\n            }\n            assertCompressionIsSupported();\n            const isYOdd = Fp.isOdd(y); // (y & _1n) === _1n;\n            const isHeadOdd = (head & 1) === 1; // ECDSA-specific\n            if (isHeadOdd !== isYOdd)\n                y = Fp.neg(y);\n            return { x, y };\n        }\n        else if (length === LU && head === 0x04) {\n            // TODO: more checks\n            const x = Fp.fromBytes(tail.subarray(L * 0, L * 1));\n            const y = Fp.fromBytes(tail.subarray(L * 1, L * 2));\n            if (!isValidXY(x, y))\n                throw new Error('bad point: is not on curve');\n            return { x, y };\n        }\n        else {\n            throw new Error(`bad point: got length ${length}, expected compressed=${LC} or uncompressed=${LU}`);\n        }\n    }\n    const toBytes = curveOpts.toBytes || pointToBytes;\n    const fromBytes = curveOpts.fromBytes || pointFromBytes;\n    const weierstrassEquation = _legacyHelperEquat(Fp, CURVE.a, CURVE.b);\n    // TODO: move top-level\n    /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\n    function isValidXY(x, y) {\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        return Fp.eql(left, right);\n    }\n    // Validate whether the passed curve params are valid.\n    // Test 1: equation y² = x³ + ax + b should work for generator point.\n    if (!isValidXY(CURVE.Gx, CURVE.Gy))\n        throw new Error('bad curve params: generator point');\n    // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n    // Guarantees curve is genus-1, smooth (non-singular).\n    const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n    const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n    if (Fp.is0(Fp.add(_4a3, _27b2)))\n        throw new Error('bad curve params: a or b');\n    /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\n    function acoord(title, n, banZero = false) {\n        if (!Fp.isValid(n) || (banZero && Fp.is0(n)))\n            throw new Error(`bad point coordinate ${title}`);\n        return n;\n    }\n    function aprjpoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n    const toAffineMemo = memoized((p, iz) => {\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE))\n            return { x, y };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null)\n            iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0)\n            return { x: Fp.ZERO, y: Fp.ZERO };\n        if (!Fp.eql(zz, Fp.ONE))\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = memoized((p) => {\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is invalid representation of ZERO.\n            if (curveOpts.allowInfinityPoint && !Fp.is0(p.py))\n                return;\n            throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        if (!Fp.isValid(x) || !Fp.isValid(y))\n            throw new Error('bad point: x or y not field elements');\n        if (!isValidXY(x, y))\n            throw new Error('bad point: equation left != right');\n        if (!p.isTorsionFree())\n            throw new Error('bad point: not in prime-order subgroup');\n        return true;\n    });\n    function finishEndo(endoBeta, k1p, k2p, k1neg, k2neg) {\n        k2p = new Point(Fp.mul(k2p.px, endoBeta), k2p.py, k2p.pz);\n        k1p = negateCt(k1neg, k1p);\n        k2p = negateCt(k2neg, k2p);\n        return k1p.add(k2p);\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\n     * Default Point works in 2d / affine coordinates: (x, y).\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n        constructor(px, py, pz) {\n            this.px = acoord('x', px);\n            this.py = acoord('y', py, true);\n            this.pz = acoord('z', pz);\n            Object.freeze(this);\n        }\n        /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\n            if (Fp.is0(x) && Fp.is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static normalizeZ(points) {\n            return normalizeZ(Point, 'pz', points);\n        }\n        static fromBytes(bytes) {\n            abytes(bytes);\n            return Point.fromHex(bytes);\n        }\n        /** Converts hash string or Uint8Array to Point. */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        /** Multiplies generator point by privateKey. */\n        static fromPrivateKey(privateKey) {\n            const normPrivateKeyToScalar = _legacyHelperNormPriv(Fn, curveOpts.allowedPrivateKeyLengths, curveOpts.wrapPrivateKey);\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        /** Multiscalar Multiplication */\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        /**\n         *\n         * @param windowSize\n         * @param isLazy true will defer table computation until the first multiplication\n         * @returns\n         */\n        precompute(windowSize = 8, isLazy = true) {\n            wnaf.setWindowSize(this, windowSize);\n            if (!isLazy)\n                this.multiply(_3n); // random number\n            return this;\n        }\n        /** \"Private method\", don't use it directly */\n        _setWindowSize(windowSize) {\n            this.precompute(windowSize);\n        }\n        // TODO: return `this`\n        /** A point on curve is valid if it conforms to equation. */\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (!Fp.isOdd)\n                throw new Error(\"Field doesn't support isOdd\");\n            return !Fp.isOdd(y);\n        }\n        /** Compare one point to another. */\n        equals(other) {\n            aprjpoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            aprjpoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            const { endo } = curveOpts;\n            if (!Fn.isValidNot0(scalar))\n                throw new Error('invalid scalar: out of range'); // 0 is invalid\n            let point, fake; // Fake point is used to const-time mult\n            const mul = (n) => wnaf.wNAFCached(this, n, Point.normalizeZ);\n            /** See docs for {@link EndomorphismOpts} */\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                const { p: k1p, f: k1f } = mul(k1);\n                const { p: k2p, f: k2f } = mul(k2);\n                fake = k1f.add(k2f);\n                point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\n            }\n            else {\n                const { p, f } = mul(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(sc) {\n            const { endo } = curveOpts;\n            const p = this;\n            if (!Fn.isValid(sc))\n                throw new Error('invalid scalar: out of range'); // 0 is valid\n            if (sc === _0n || p.is0())\n                return Point.ZERO;\n            if (sc === _1n)\n                return p; // fast-path\n            if (wnaf.hasPrecomputes(this))\n                return this.multiply(sc);\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n                // `wNAFCachedUnsafe` is 30% slower\n                const { p1, p2 } = mulEndoUnsafe(Point, p, k1, k2);\n                return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\n            }\n            else {\n                return wnaf.wNAFCachedUnsafe(p, sc);\n            }\n        }\n        multiplyAndAddUnsafe(Q, a, b) {\n            const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n            return sum.is0() ? undefined : sum;\n        }\n        /**\n         * Converts Projective point to affine (x, y) coordinates.\n         * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n         */\n        toAffine(invertedZ) {\n            return toAffineMemo(this, invertedZ);\n        }\n        /**\n         * Checks whether Point is free of torsion elements (is in prime subgroup).\n         * Always torsion-free for cofactor=1 curves.\n         */\n        isTorsionFree() {\n            const { isTorsionFree } = curveOpts;\n            if (cofactor === _1n)\n                return true;\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            return wnaf.wNAFCachedUnsafe(this, CURVE_ORDER).is0();\n        }\n        clearCofactor() {\n            const { clearCofactor } = curveOpts;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(cofactor);\n        }\n        toBytes(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        /** @deprecated use `toBytes` */\n        toRawBytes(isCompressed = true) {\n            return this.toBytes(isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return bytesToHex(this.toBytes(isCompressed));\n        }\n        toString() {\n            return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n        }\n    }\n    // base / generator point\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    // fields\n    Point.Fp = Fp;\n    Point.Fn = Fn;\n    const bits = Fn.BITS;\n    const wnaf = wNAF(Point, curveOpts.endo ? Math.ceil(bits / 2) : bits);\n    return Point;\n}\n// _legacyWeierstrass\n/** @deprecated use `weierstrassN` */\nexport function weierstrassPoints(c) {\n    const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n    const Point = weierstrassN(CURVE, curveOpts);\n    return _weierstrass_new_output_to_legacy(c, Point);\n}\n// Points start with byte 0x02 when y is even; otherwise 0x03\nfunction pprefix(hasEvenY) {\n    return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\n}\nexport function ecdsa(Point, ecdsaOpts, curveOpts = {}) {\n    _validateObject(ecdsaOpts, { hash: 'function' }, {\n        hmac: 'function',\n        lowS: 'boolean',\n        randomBytes: 'function',\n        bits2int: 'function',\n        bits2int_modN: 'function',\n    });\n    const randomBytes_ = ecdsaOpts.randomBytes || randomBytes;\n    const hmac_ = ecdsaOpts.hmac ||\n        ((key, ...msgs) => hmac(ecdsaOpts.hash, key, concatBytes(...msgs)));\n    const { Fp, Fn } = Point;\n    const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn;\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? Fn.neg(s) : s;\n    }\n    function aValidRS(title, num) {\n        if (!Fn.isValidNot0(num))\n            throw new Error(`invalid signature ${title}: out of range 1..CURVE.n`);\n    }\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            aValidRS('r', r); // r in [1..N-1]\n            aValidRS('s', s); // s in [1..N-1]\n            this.r = r;\n            this.s = s;\n            if (recovery != null)\n                this.recovery = recovery;\n            Object.freeze(this);\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const L = Fn.BYTES;\n            const b = ensureBytes('compactSignature', hex, L * 2);\n            return new Signature(Fn.fromBytes(b.subarray(0, L)), Fn.fromBytes(b.subarray(L, L * 2)));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        /**\n         * @todo remove\n         * @deprecated\n         */\n        assertValidity() { }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        // ProjPointType<bigint>\n        recoverPublicKey(msgHash) {\n            const FIELD_ORDER = Fp.ORDER;\n            const { r, s, recovery: rec } = this;\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            // ECDSA recovery is hard for cofactor > 1 curves.\n            // In sign, `r = q.x mod n`, and here we recover q.x from r.\n            // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\n            // However, for cofactor>1, r+n may not get q.x:\n            // r+n*i would need to be done instead where i is unknown.\n            // To easily get i, we either need to:\n            // a. increase amount of valid recid values (4, 5...); OR\n            // b. prohibit non-prime-order signatures (recid > 1).\n            const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n            if (hasCofactor && rec > 1)\n                throw new Error('recovery id is ambiguous for h>1 curve');\n            const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n            if (!Fp.isValid(radj))\n                throw new Error('recovery id 2 or 3 invalid');\n            const x = Fp.toBytes(radj);\n            const R = Point.fromHex(concatBytes(pprefix((rec & 1) === 0), x));\n            const ir = Fn.inv(radj); // r^-1\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            const u1 = Fn.create(-h * ir); // -hr^-1\n            const u2 = Fn.create(s * ir); // sr^-1\n            // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\n            const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n            if (Q.is0())\n                throw new Error('point at infinify');\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n        }\n        toBytes(format) {\n            if (format === 'compact')\n                return concatBytes(Fn.toBytes(this.r), Fn.toBytes(this.s));\n            if (format === 'der')\n                return hexToBytes(DER.hexFromSig(this));\n            throw new Error('invalid format');\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return this.toBytes('der');\n        }\n        toDERHex() {\n            return bytesToHex(this.toBytes('der'));\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return this.toBytes('compact');\n        }\n        toCompactHex() {\n            return bytesToHex(this.toBytes('compact'));\n        }\n    }\n    const normPrivateKeyToScalar = _legacyHelperNormPriv(Fn, curveOpts.allowedPrivateKeyLengths, curveOpts.wrapPrivateKey);\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const n = CURVE_ORDER;\n            return mapHashToField(randomBytes_(getMinHashLength(n)), n);\n        },\n        precompute(windowSize = 8, point = Point.BASE) {\n            return point.precompute(windowSize, false);\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        if (typeof item === 'bigint')\n            return false;\n        if (item instanceof Point)\n            return true;\n        const arr = ensureBytes('key', item);\n        const length = arr.length;\n        const L = Fp.BYTES;\n        const LC = L + 1; // e.g. 33 for 32\n        const LU = 2 * L + 1; // e.g. 65 for 32\n        if (curveOpts.allowedPrivateKeyLengths || Fn.BYTES === LC) {\n            return undefined;\n        }\n        else {\n            return length === LC || length === LU;\n        }\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA) === true)\n            throw new Error('first arg must be private key');\n        if (isProbPub(publicB) === false)\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = ecdsaOpts.bits2int ||\n        function (bytes) {\n            // Our custom check \"just in case\", for protection against DoS\n            if (bytes.length > 8192)\n                throw new Error('input is too large');\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = ecdsaOpts.bits2int_modN ||\n        function (bytes) {\n            return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = bitMask(fnBits);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\n        aInRange('num < 2^' + fnBits, num, _0n, ORDER_MASK);\n        return Fn.toBytes(num);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash } = ecdsaOpts;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        validateSigVerOpts(opts);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes_(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n        // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n        // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            // Important: all mod() calls here must be done over N\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!Fn.isValidNot0(k))\n                return; // Valid scalars (including k) must be in 1..N-1\n            const ik = Fn.inv(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = Fn.create(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n    const defaultVerOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const drbg = createHmacDrbg(ecdsaOpts.hash.outputLen, Fn.BYTES, hmac_);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE.precompute(8);\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        // Verify opts\n        validateSigVerOpts(opts);\n        const { lowS, prehash, format } = opts;\n        // TODO: remove\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        if (format !== undefined && !['compact', 'der', 'js'].includes(format))\n            throw new Error('format must be \"compact\", \"der\" or \"js\"');\n        const isHex = typeof sg === 'string' || isBytes(sg);\n        const isObj = !isHex &&\n            !format &&\n            typeof sg === 'object' &&\n            sg !== null &&\n            typeof sg.r === 'bigint' &&\n            typeof sg.s === 'bigint';\n        if (!isHex && !isObj)\n            throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n        let _sig = undefined;\n        let P;\n        // deduce signature format\n        try {\n            // if (format === 'js') {\n            //   if (sg != null && !isBytes(sg)) _sig = new Signature(sg.r, sg.s);\n            // } else if (format === 'compact') {\n            //   _sig = Signature.fromCompact(sg);\n            // } else if (format === 'der') {\n            //   _sig = Signature.fromDER(sg);\n            // } else {\n            //   throw new Error('invalid format');\n            // }\n            if (isObj) {\n                if (format === undefined || format === 'js') {\n                    _sig = new Signature(sg.r, sg.s);\n                }\n                else {\n                    throw new Error('invalid format');\n                }\n            }\n            if (isHex) {\n                // TODO: remove this malleable check\n                // Signature can be represented in 2 ways: compact (2*Fn.BYTES) & DER (variable-length).\n                // Since DER can also be 2*Fn.BYTES bytes, we check for it first.\n                try {\n                    if (format !== 'compact')\n                        _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                }\n                if (!_sig && format !== 'der')\n                    _sig = Signature.fromCompact(sg);\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            return false;\n        }\n        if (!_sig)\n            return false;\n        if (lowS && _sig.hasHighS())\n            return false;\n        // todo: optional.hash => hash\n        if (prehash)\n            msgHash = ecdsaOpts.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = Fn.inv(s); // s^-1\n        const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\n        const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2));\n        if (R.is0())\n            return false;\n        const v = Fn.create(R.x); // v = r.x mod n\n        return v === r;\n    }\n    // TODO: clarify API for cloning .clone({hash: sha512}) ? .createWith({hash: sha512})?\n    // const clone = (hash: CHash): ECDSA => ecdsa(Point, { ...ecdsaOpts, ...getHash(hash) }, curveOpts);\n    return Object.freeze({\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        utils,\n        Point,\n        Signature,\n    });\n}\nfunction _weierstrass_legacy_opts_to_new(c) {\n    const CURVE = {\n        a: c.a,\n        b: c.b,\n        p: c.Fp.ORDER,\n        n: c.n,\n        h: c.h,\n        Gx: c.Gx,\n        Gy: c.Gy,\n    };\n    const Fp = c.Fp;\n    const Fn = Field(CURVE.n, c.nBitLength);\n    const curveOpts = {\n        Fp,\n        Fn,\n        allowedPrivateKeyLengths: c.allowedPrivateKeyLengths,\n        allowInfinityPoint: c.allowInfinityPoint,\n        endo: c.endo,\n        wrapPrivateKey: c.wrapPrivateKey,\n        isTorsionFree: c.isTorsionFree,\n        clearCofactor: c.clearCofactor,\n        fromBytes: c.fromBytes,\n        toBytes: c.toBytes,\n    };\n    return { CURVE, curveOpts };\n}\nfunction _ecdsa_legacy_opts_to_new(c) {\n    const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n    const ecdsaOpts = {\n        hash: c.hash,\n        hmac: c.hmac,\n        randomBytes: c.randomBytes,\n        lowS: c.lowS,\n        bits2int: c.bits2int,\n        bits2int_modN: c.bits2int_modN,\n    };\n    return { CURVE, curveOpts, ecdsaOpts };\n}\nfunction _weierstrass_new_output_to_legacy(c, Point) {\n    const { Fp, Fn } = Point;\n    // TODO: remove\n    function isWithinCurveOrder(num) {\n        return inRange(num, _1n, Fn.ORDER);\n    }\n    const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\n    const normPrivateKeyToScalar = _legacyHelperNormPriv(Fn, c.allowedPrivateKeyLengths, c.wrapPrivateKey);\n    return Object.assign({}, {\n        CURVE: c,\n        Point: Point,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    });\n}\nfunction _ecdsa_new_output_to_legacy(c, ecdsa) {\n    return Object.assign({}, ecdsa, {\n        ProjectivePoint: ecdsa.Point,\n        CURVE: c,\n    });\n}\n// _ecdsa_legacy\nexport function weierstrass(c) {\n    const { CURVE, curveOpts, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);\n    const Point = weierstrassN(CURVE, curveOpts);\n    const signs = ecdsa(Point, ecdsaOpts, curveOpts);\n    return _ecdsa_new_output_to_legacy(c, signs);\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    validateField(Fp);\n    const { A, B, Z } = opts;\n    if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\n    if (!Fp.isOdd)\n        throw new Error('Field does not have .isOdd()');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n        x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { weierstrass } from \"./abstract/weierstrass.js\";\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash) {\n    return { hash };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, hash: hash });\n    return { ...create(defHash), create };\n}\n//# sourceMappingURL=_shortw_utils.js.map","/**\n * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\n * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { randomBytes } from '@noble/hashes/utils.js';\nimport { createCurve } from \"./_shortw_utils.js\";\nimport { createHasher, isogenyMap, } from \"./abstract/hash-to-curve.js\";\nimport { Field, mod, pow2 } from \"./abstract/modular.js\";\nimport { mapToCurveSimpleSWU, } from \"./abstract/weierstrass.js\";\nimport { aInRange, bytesToNumberBE, concatBytes, ensureBytes, inRange, numberToBytesBE, } from \"./utils.js\";\n// Seems like generator was produced from some seed:\n// `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\n// // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\nconst secp256k1_CURVE = {\n    p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: BigInt(1),\n    a: BigInt(0),\n    b: BigInt(7),\n    Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n    Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8'),\n};\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1_CURVE.p;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fpk1 = Field(secp256k1_CURVE.p, undefined, undefined, { sqrt: sqrtMod });\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n * ```\n */\nexport const secp256k1 = createCurve({\n    ...secp256k1_CURVE,\n    Fp: Fpk1,\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n        // Endomorphism, see above\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1_CURVE.n;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1_CURVE.p);\nconst modN = (x) => mod(x, secp256k1_CURVE.n);\nconst Point = /* @__PURE__ */ (() => secp256k1.Point)();\nconst hasEven = (y) => y % _2n === _0n;\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = hasEven(p.y) ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    aInRange('x', x, _1n, secp256k1_CURVE.p); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (!hasEven(y))\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = Point.fromAffine({ x, y }); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!inRange(r, _1n, secp256k1_CURVE.p))\n            return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!inRange(s, _1n, secp256k1_CURVE.n))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        // R = s⋅G - e⋅P, where -eP == (n-e)P\n        const R = Point.BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(modN(-e)));\n        const { x, y } = R.toAffine();\n        // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n        if (R.is0() || !hasEven(y) || x !== r)\n            return false;\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n * ```\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fpk1, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n}))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher = /* @__PURE__ */ (() => createHasher(secp256k1.Point, (scalars) => {\n    const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => secp256k1_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => secp256k1_hasher.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map"],"names":["HMAC","Hash","hash","_key","ahash","key","toBytes","blockLen","pad","i","clean","buf","aexists","out","abytes","to","oHash","iHash","finished","destroyed","outputLen","hmac","message","_0n","_1n","abool","title","value","numberToHexUnpadded","num","hex","hexToNumber","bytesToNumberBE","bytes","bytesToHex_","bytesToNumberLE","abytes_","numberToBytesBE","n","len","hexToBytes_","numberToBytesLE","ensureBytes","expectedLength","res","e","isBytes_","isPosBig","inRange","min","max","aInRange","bitLen","bitMask","createHmacDrbg","hashLen","qByteLen","hmacFn","u8n","u8of","byte","v","k","reset","h","b","reseed","seed","gen","sl","concatBytes_","pred","_validateObject","object","fields","optFields","checkField","fieldName","expectedType","isOpt","val","current","memoized","fn","map","arg","args","computed","_2n","_3n","_4n","_5n","_8n","mod","a","result","pow2","x","power","modulo","invert","number","u","q","r","m","sqrt3mod4","Fp","p1div4","root","sqrt5mod8","p5div8","n2","nv","tonelliShanks","P","Q","S","Z","_Fp","Field","FpLegendre","cc","Q1div2","M","c","t","R","t_tmp","exponent","FpSqrt","FIELD_FIELDS","validateField","field","initial","opts","FpPow","p","d","FpInvertBatch","nums","passZero","inverted","multipliedAcc","acc","invertedAcc","p1mod2","powered","yes","zero","no","nLength","nBitLength","anumber","_nBitLength","nByteLength","ORDER","bitLenOrOpts","isLE","_nbitLength","_sqrt","_opts","BITS","BYTES","sqrtP","f","lhs","rhs","lst","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","length","mapHashToField","fieldLen","minLen","reduced","negateCt","condition","item","neg","normalizeZ","property","points","getz","toInv","validateW","W","bits","calcWOpts","scalarBits","windows","windowSize","maxNumber","mask","shiftBy","calcOffsets","window","wOpts","wbits","nextN","offsetStart","offset","isZero","isNeg","isNegF","validateMSMPoints","validateMSMScalars","scalars","s","pointPrecomputes","pointWindowSizes","getW","assert0","wNAF","elm","base","precomputes","wo","offsetF","transform","comp","prev","mulEndoUnsafe","point","k1","k2","p1","p2","pippenger","fieldN","plength","slength","MASK","buckets","lastBits","sum","j","scalar","resI","sumI","createField","order","_createCurveFields","type","CURVE","curveOpts","Fn","params","validateSigVerOpts","DERErr","DER","tag","data","E","dataLen","lenLen","pos","first","isLong","lengthBytes","int","tlv","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","sig","rs","ss","seq","_legacyHelperEquat","weierstrassEquation","x2","x3","_legacyHelperNormPriv","allowedPrivateKeyLengths","wrapPrivateKey","expected","normPrivateKeyToScalar","padded","weierstrassN","cofactor","CURVE_ORDER","endo","assertCompressionIsSupported","pointToBytes","_c","isCompressed","y","bx","hasEvenY","concatBytes","pprefix","pointFromBytes","L","LC","LU","head","tail","y2","sqrtError","err","isYOdd","isValidXY","fromBytes","left","right","_4a3","_27b2","acoord","banZero","aprjpoint","other","Point","toAffineMemo","iz","z","is0","ax","ay","zz","assertValidMemo","finishEndo","endoBeta","k1p","k2p","k1neg","k2neg","px","py","pz","privateKey","isLazy","wnaf","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t2","t3","t4","t5","fake","mul","k1f","k2f","sc","invertedZ","isTorsionFree","clearCofactor","bytesToHex","ecdsa","ecdsaOpts","randomBytes_","randomBytes","hmac_","msgs","fnBits","isBiggerThanHalfOrder","HALF","normalizeS","aValidRS","Signature","recovery","msgHash","FIELD_ORDER","rec","radj","ir","bits2int_modN","u1","u2","format","hexToBytes","utils","getPublicKey","isProbPub","getSharedSecret","privateA","publicB","bits2int","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","lowS","prehash","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","sign","privKey","verify","signature","publicKey","sg","isHex","isBytes","isObj","_sig","derError","is","_weierstrass_legacy_opts_to_new","_ecdsa_legacy_opts_to_new","_ecdsa_new_output_to_legacy","weierstrass","signs","createCurve","curveDef","defHash","create","secp256k1_CURVE","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","Fpk1","secp256k1","a1","b1","a2","POW_2_128","c1","c2","sha256"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}